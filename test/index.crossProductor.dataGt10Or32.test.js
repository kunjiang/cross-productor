const { test, expect } = require('@jest/globals');
const { crossProductor } = require('../src/index');



test( '测试 crossProductor 方法, 当数据集刚好为10', () => {
  let data = [
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
    [ 1 ]
  ];
  let res2 = crossProductor( data );
  expect(res2).toEqual( [ [ 1, 1 ], [ 2, 1 ], [ 3, 1 ], [ 4, 1 ], [ 5, 1 ], [ 6, 1 ], [ 7, 1 ], [ 8, 1 ], [ 9, 1 ], [ 10, 1 ] ] );

} );

test( '测试 crossProductor 方法, 当数据集刚好为10x2', () => {
  let data = [
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
    [ 1, 2 ]
  ];
  let res2 = crossProductor( data );

  // expect(res2).toEqual( [ 
  //   [ 1, 1 ], [ 2, 1 ], [ 3, 1 ], [ 4, 1 ], [ 5, 1 ], [ 6, 1 ], [ 7, 1 ], [ 8, 1 ], [ 9, 1 ], [ 10, 1 ],
  //   [ 1, 2 ], [ 2, 2 ], [ 3, 2 ], [ 4, 2 ], [ 5, 2 ], [ 6, 2 ], [ 7, 2 ], [ 8, 2 ], [ 9, 2 ], [ 10, 2 ] 
  // ] );

  expect(res2).toEqual( [ 
    [ 1, 1 ], [ 1, 2 ],
    [ 2, 1 ], [ 2, 2 ],
    [ 3, 1 ], [ 3, 2 ],
    [ 4, 1 ], [ 4, 2 ],
    [ 5, 1 ], [ 5, 2 ],
    [ 6, 1 ], [ 6, 2 ],
    [ 7, 1 ], [ 7, 2 ],
    [ 8, 1 ], [ 8, 2 ],
    [ 9, 1 ], [ 9, 2 ],
    [ 10, 1 ], [ 10, 2 ], 
  ] );

} );


test( '测试 crossProductor 方法, 当数据集为11x11时', () => {
  let data = [
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ],
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ],
  ];
  let res2 = crossProductor( data );
  expect(res2).toEqual( [  
    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 1, 6 ], [ 1, 7 ], [ 1, 8 ], [ 1, 9 ], [ 1, 10 ], [ 1, 11 ],
    [ 2, 1 ], [ 2, 2 ], [ 2, 3 ], [ 2, 4 ], [ 2, 5 ], [ 2, 6 ], [ 2, 7 ], [ 2, 8 ], [ 2, 9 ], [ 2, 10 ], [ 2, 11 ],
    [ 3, 1 ], [ 3, 2 ], [ 3, 3 ], [ 3, 4 ], [ 3, 5 ], [ 3, 6 ], [ 3, 7 ], [ 3, 8 ], [ 3, 9 ], [ 3, 10 ], [ 3, 11 ],
    [ 4, 1 ], [ 4, 2 ], [ 4, 3 ], [ 4, 4 ], [ 4, 5 ], [ 4, 6 ], [ 4, 7 ], [ 4, 8 ], [ 4, 9 ], [ 4, 10 ], [ 4, 11 ],
    [ 5, 1 ], [ 5, 2 ], [ 5, 3 ], [ 5, 4 ], [ 5, 5 ], [ 5, 6 ], [ 5, 7 ], [ 5, 8 ], [ 5, 9 ], [ 5, 10 ], [ 5, 11 ],
    [ 6, 1 ], [ 6, 2 ], [ 6, 3 ], [ 6, 4 ], [ 6, 5 ], [ 6, 6 ], [ 6, 7 ], [ 6, 8 ], [ 6, 9 ], [ 6, 10 ], [ 6, 11 ],
    [ 7, 1 ], [ 7, 2 ], [ 7, 3 ], [ 7, 4 ], [ 7, 5 ], [ 7, 6 ], [ 7, 7 ], [ 7, 8 ], [ 7, 9 ], [ 7, 10 ], [ 7, 11 ],
    [ 8, 1 ], [ 8, 2 ], [ 8, 3 ], [ 8, 4 ], [ 8, 5 ], [ 8, 6 ], [ 8, 7 ], [ 8, 8 ], [ 8, 9 ], [ 8, 10 ], [ 8, 11 ],
    [ 9, 1 ], [ 9, 2 ], [ 9, 3 ], [ 9, 4 ], [ 9, 5 ], [ 9, 6 ], [ 9, 7 ], [ 9, 8 ], [ 9, 9 ], [ 9, 10 ], [ 9, 11 ],
    [ 10, 1 ], [ 10, 2 ], [ 10, 3 ], [ 10, 4 ], [ 10, 5 ], [ 10, 6 ], [ 10, 7 ], [ 10, 8 ], [ 10, 9 ], [ 10, 10 ], [ 10, 11 ],
    [ 11, 1 ], [ 11, 2 ], [ 11, 3 ], [ 11, 4 ], [ 11, 5 ], [ 11, 6 ], [ 11, 7 ], [ 11, 8 ], [ 11, 9 ], [ 11, 10 ], [ 11, 11 ],
  ] );

} );



test( '测试 crossProductor 方法, 当数据集刚好为36', () => {
  let data = [
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
      31, 32, 33, 34, 35, 36
    ],
    [ 1 ]
  ];
  let res2 = crossProductor( data );
  expect(res2).toEqual( [ 
    [ 1, 1 ], [ 2, 1 ], [ 3, 1 ], [ 4, 1 ], [ 5, 1 ], [ 6, 1 ], [ 7, 1 ], [ 8, 1 ], [ 9, 1 ], [ 10, 1 ], 
    [ 11, 1 ], [ 12, 1 ], [ 13, 1 ], [ 14, 1 ], [ 15, 1 ], [ 16, 1 ], [ 17, 1 ], [ 18, 1 ], [ 19, 1 ], [ 20, 1 ], 
    [ 21, 1 ], [ 22, 1 ], [ 23, 1 ], [ 24, 1 ], [ 25, 1 ], [ 26, 1 ], [ 27, 1 ], [ 28, 1 ], [ 29, 1 ], [ 30, 1 ], 
    [ 31, 1 ], [ 32, 1 ], [ 33, 1 ], [ 34, 1 ], [ 35, 1 ], [ 36, 1 ]
  ] );

} );



test( '测试 crossProductor 方法, 当数据集刚好为37', () => {
  let data = [
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
      11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
      31, 32, 33, 34, 35, 36, 37
    ],
    [ 1 ]
  ];
  let res2 = crossProductor( data );
  expect(res2).toEqual( [ 
    [ 1, 1 ], [ 2, 1 ], [ 3, 1 ], [ 4, 1 ], [ 5, 1 ], [ 6, 1 ], [ 7, 1 ], [ 8, 1 ], [ 9, 1 ], [ 10, 1 ], 
    [ 11, 1 ], [ 12, 1 ], [ 13, 1 ], [ 14, 1 ], [ 15, 1 ], [ 16, 1 ], [ 17, 1 ], [ 18, 1 ], [ 19, 1 ], [ 20, 1 ], 
    [ 21, 1 ], [ 22, 1 ], [ 23, 1 ], [ 24, 1 ], [ 25, 1 ], [ 26, 1 ], [ 27, 1 ], [ 28, 1 ], [ 29, 1 ], [ 30, 1 ], 
    [ 31, 1 ], [ 32, 1 ], [ 33, 1 ], [ 34, 1 ], [ 35, 1 ], [ 36, 1 ], [ 37, 1 ]
  ] );

} );